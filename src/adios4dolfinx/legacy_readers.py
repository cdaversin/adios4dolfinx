# Copyright (C) 2023 JÃ¸rgen Schartum Dokken
#
# This file is part of adios4dolfinx
#
# SPDX-License-Identifier:    MIT

import dolfinx
import adios2
from .utils import compute_local_range
from mpi4py import MPI
import numpy as np
import basix
import ufl

__all__ = ["read_mesh_from_legacy_checkpoint"]


def read_mesh_from_legacy_checkpoint(filename: str, cell_type: str = "tetrahedron") -> dolfinx.mesh.Mesh:
    """
    Read mesh from `h5`-file generated by legacy DOLFIN `XDMFFile.write_checkpoint`.
    Needs to get the `cell_type` as input, as legacy DOLFIN does not store the cell-type in the 
    `h5`-file

    Args:
        filename: Path to `h5` file (with extension)
        celltype: String describing cell-type    
    """

    adios = adios2.ADIOS(MPI.COMM_WORLD)
    io = adios.DeclareIO("Mesh reader")
    io.SetEngine("HDF5")

    # Open ADIOS2 Reader
    infile = io.Open(filename, adios2.Mode.Read)
    path = "func/func_0"
    # Get mesh topology (distributed)
    if f"{path}/topology" not in io.AvailableVariables().keys():
        raise KeyError(f"Mesh topology not found at '{path}topology'")
    topology = io.InquireVariable(f"{path}/topology")
    shape = topology.Shape()
    local_range = compute_local_range(MPI.COMM_WORLD, shape[0])
    topology.SetSelection([[local_range[0], 0], [
                          local_range[1]-local_range[0], shape[1]]])

    mesh_topology = np.empty(
        (local_range[1]-local_range[0], shape[1]), dtype=np.int32)
    infile.Get(topology, mesh_topology, adios2.Mode.Sync)

    # NOTE: XDMFFile.write_checkpoint does not write all information in h5 file, would need to fetch
    # info regarding celltype from h5 file

    # Get mesh cell type
    # if f"{path}/topology/celltype" not in io.AvailableAttributes().keys():
    #     raise KeyError(
    #         f"Mesh cell type not found at '{path}/topology/celltype'")
    # celltype = io.InquireAttribute(f"{path}/topology/celltype")
    # cell_type = celltype.DataString()[0]

    # Get mesh geometry
    if f"{path}/geometry" not in io.AvailableVariables().keys():
        raise KeyError(
            f"Mesh geometry not found at '{path}/geometry'")
    geometry = io.InquireVariable(f"{path}/geometry")
    shape = geometry.Shape()
    local_range = compute_local_range(MPI.COMM_WORLD, shape[0])
    geometry.SetSelection([[local_range[0], 0], [
                          local_range[1]-local_range[0], shape[1]]])
    mesh_geometry = np.empty(
        (local_range[1]-local_range[0], shape[1]), dtype=np.float64)
    infile.Get(geometry, mesh_geometry, adios2.Mode.Sync)

    assert adios.RemoveIO("Mesh reader")

    # Create DOLFINx mesh
    element = basix.ufl_wrapper.create_vector_element(
        basix.ElementFamily.P, cell_type, 1, basix.LagrangeVariant.equispaced,
        dim=mesh_geometry.shape[1], gdim=mesh_geometry.shape[1])
    domain = ufl.Mesh(element)

    return dolfinx.mesh.create_mesh(
        MPI.COMM_WORLD, mesh_topology, mesh_geometry, domain)
